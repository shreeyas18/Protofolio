---
title: "Week8_Assignment"
author: "Shreeya Sampat"
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
runtime: shiny
execute:
  echo: false
---

## Loading and Exploring The Data

```{r}
# Load necessary libraries
library(tidyverse)
library(tidytuesdayR)
library(shiny)
library(ggiraph)
library(flexdashboard)

# Read directly from GitHub
olympics <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-08-06/olympics.csv')

# View the first few rows of the dataset
head(olympics)

# Summary of the dataset
summary(olympics)

# Check for missing values
colSums(is.na(olympics))

```

# Preliminary Calculations and Graphs

## Data Preparation

```{r}
olympics_filtered <- olympics %>%
  filter(!is.na(medal)) %>% 
  group_by(year, sex, medal) %>%
  summarise(medal_count = n()) %>%
  ungroup()

# View the summarized data
head(olympics_filtered)
```

**Line Chart of Medal Count Over Time by Gender**

```{r}
ggplot(olympics_filtered, aes(x = year, y = medal_count, color = sex)) +
  geom_line(size = 1.5) +
  labs(title = "Medal Count Over Time by Gender",
       x = "Year",
       y = "Medal Count",
       color = "Gender") +
  theme_minimal() +
  theme(text = element_text(size = 14))
```

Bar Chart of Medal Distribution by Gender and Sport

```{r}
olympics_sport <- olympics %>%
  filter(!is.na(medal)) %>%
  group_by(sport, sex) %>%
  summarise(total_medals = n()) %>%
  ungroup()

# Calculate total medals by sport and filter top 10 sports
top10_sports <- olympics_sport %>%
  group_by(sport) %>%
  summarise(total_medals = sum(total_medals)) %>%
  top_n(10, total_medals) %>%
  pull(sport)

# Filter the original data for only the top 10 sports
olympics_top10 <- olympics_sport %>%
  filter(sport %in% top10_sports)

# Create the plot for top 10 sports
ggplot(olympics_top10, aes(y = reorder(sport, total_medals), x = total_medals, fill = sex)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Top 10 Sports by Medal Distribution and Gender",
       y = "Sport",
       x = "Total Medals",
       fill = "Gender") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(size = 10),
    axis.text.y = element_text(size = 8),
    axis.title = element_text(size = 14),
    plot.title = element_text(size = 16, face = "bold"),
    legend.text = element_text(size = 12),
    legend.title = element_text(size = 14)
  ) +
  scale_fill_manual(values = c("F" = "#FF69B4", "M" = "#1F77B4"))
```

## Medal Distribution by Country

```{r}
medals_by_country <- olympics %>%
  filter(!is.na(medal)) %>%
  group_by(team) %>%
  summarize(total_medals = n()) %>%
  arrange(desc(total_medals))

head(medals_by_country, 10)  # View the top 10 countries

ggplot(medals_by_country[1:10, ], aes(y = reorder(team, total_medals), x = total_medals)) +
  geom_bar(stat = "identity", fill = "gold") +
  theme_minimal() +
  labs(title = "Top 10 Countries by Total Olympic Medals", y = "Country", x = "Total Medals") +
  theme(axis.text.y = element_text(size = 10))
```

## **Performance by Year**

```{r}
medal_trends <- olympics %>%
  filter(!is.na(medal)) %>%
  group_by(year) %>%
  summarize(
    avg_age = mean(age, na.rm = TRUE),
    total_medals = n()
  )

head(medal_trends)

ggplot(medal_trends, aes(x = year, y = avg_age)) +
  geom_line(color = "red") +
  geom_point() +
  theme_minimal() +
  labs(title = "Average Age of Medalists Over Time", x = "Year", y = "Average Age")

```

## Gender Comparison

```{r}

gender_comparison <- olympics %>%
  filter(!is.na(medal)) %>%
  group_by(year, sex) %>%
  summarize(total_medals = n())

head(gender_comparison)

ggplot(gender_comparison, aes(x = year, y = total_medals, color = sex)) +
  geom_line() +
  geom_point() +
  theme_minimal() +
  labs(title = "Medals by Gender Over Time", x = "Year", y = "Total Medals", color = "Gender")
```

## Specific Sport or Event Focus

```{r}

sport_focus <- olympics %>%
  filter(sport == "Athletics" & !is.na(medal)) %>%
  group_by(year, medal) %>%
  summarize(total_medals = n())

head(sport_focus)

ggplot(sport_focus, aes(x = year, y = total_medals, color = medal)) +
  geom_line() +
  geom_point() +
  theme_minimal() +
  labs(title = "Medals in Athletics Over Time", x = "Year", y = "Total Medals", color = "Medal Type")

```

# Shiny Dashboard

## Setting Up the Shiny Dashboard

```{r}
ui <- fluidPage(
  titlePanel("Olympic Gender Comparison"),
  sidebarLayout(
    sidebarPanel(
      selectInput("selected_sport", "Select Sport:", choices = unique(olympics$sport)),
      sliderInput("year_range", "Select Year Range:",
                  min = min(olympics$year), max = max(olympics$year),
                  value = c(min(olympics$year), max(olympics$year)),
                  step = 4, round = TRUE, sep = "")  # Remove comma from years
    ),
    mainPanel(
      girafeOutput("gender_time_plot"),  # Use girafeOutput for interactive plot
      girafeOutput("sport_gender_plot")  # Use girafeOutput for interactive bar plot
    )
  )
)
```

## Shiny Server

```{r}

server <- function(input, output) {

  # Reactive data filtered by selected sport and year range
  filtered_data <- reactive({
    olympics %>%
      filter(sport == input$selected_sport,
             year >= input$year_range[1], 
             year <= input$year_range[2], 
             !is.na(medal)) %>%
      group_by(year, sex) %>%
      summarise(medal_count = n(), .groups = 'drop') %>%
      mutate(sex_label = ifelse(sex == "M", "Male", "Female"))  # Create a label for gender
  })
  
  # Render the interactive line plot with girafe
  output$gender_time_plot <- renderGirafe({
    p <- ggplot(filtered_data(), aes(x = year, y = medal_count, color = sex)) +
      geom_line(size = 1.5) + 
      geom_point_interactive(aes(tooltip = paste("Year:", year, "<br>Medals:", medal_count, "<br>Gender:", sex_label)), size = 2) +
      labs(title = "Medal Count Over Time by Gender",
           x = "Year",
           y = "Medal Count",
           color = "Gender") +
      scale_color_manual(values = c("F" = "pink", "M" = "blue"), labels = c("F" = "Female", "M" = "Male")) +
      theme_minimal() +
      theme(text = element_text(size = 14))
    
    girafe(ggobj = p)
  })
  
  # Render the interactive bar plot with girafe
  output$sport_gender_plot <- renderGirafe({
    olympics_sport_filtered <- olympics %>%
      filter(sport == input$selected_sport, 
             !is.na(medal)) %>%
      group_by(sex) %>%
      summarise(total_medals = n(), .groups = 'drop') %>%
      mutate(sex_label = ifelse(sex == "M", "Male", "Female"))  # Create a label for gender
    
    p <- ggplot(olympics_sport_filtered, aes(x = sex_label, y = total_medals, fill = sex)) +
      geom_bar_interactive(stat = "identity", position = "dodge", 
                           aes(tooltip = paste("Gender:", sex_label, "<br>Total Medals:", total_medals))) +
      scale_fill_manual(values = c("F" = "pink", "M" = "blue"), labels = c("F" = "Female", "M" = "Male")) +
      labs(title = paste("Medal Distribution in", input$selected_sport),
           x = "Gender",
           y = "Total Medals",
           fill = "Gender") +
      theme_minimal() +
      theme(text = element_text(size = 14))
    
    girafe(ggobj = p)
  })
}

```

## Running the Dashboard

```{r}
shinyApp(ui = ui, server = server)

```
